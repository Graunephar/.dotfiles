<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>bundleid</key>
	<string>com.cpoissonnier.twilio-console-to-twilio-cli</string>
	<key>connections</key>
	<dict>
		<key>190193E2-4DA9-4A9F-ABA0-C411F4EC42F9</key>
		<array>
			<dict>
				<key>destinationuid</key>
				<string>1C14CA2A-FA3F-41C7-91DD-9C3DEBED04EF</string>
				<key>modifiers</key>
				<integer>0</integer>
				<key>modifiersubtext</key>
				<string></string>
				<key>vitoclose</key>
				<false/>
			</dict>
		</array>
		<key>1C14CA2A-FA3F-41C7-91DD-9C3DEBED04EF</key>
		<array>
			<dict>
				<key>destinationuid</key>
				<string>AD8406AB-8370-4FDF-A087-391C586234B6</string>
				<key>modifiers</key>
				<integer>0</integer>
				<key>modifiersubtext</key>
				<string></string>
				<key>vitoclose</key>
				<false/>
			</dict>
		</array>
		<key>3FE49FA5-44FC-4438-B9C1-DE1B9B369C60</key>
		<array>
			<dict>
				<key>destinationuid</key>
				<string>3C51C0A6-81D7-456F-BA1F-62752EA1CA36</string>
				<key>modifiers</key>
				<integer>0</integer>
				<key>modifiersubtext</key>
				<string></string>
				<key>vitoclose</key>
				<false/>
			</dict>
		</array>
		<key>5B47B8AC-1201-469A-9136-9ED9D7F06B0C</key>
		<array>
			<dict>
				<key>destinationuid</key>
				<string>3FE49FA5-44FC-4438-B9C1-DE1B9B369C60</string>
				<key>modifiers</key>
				<integer>1048576</integer>
				<key>modifiersubtext</key>
				<string>run Twilio CLI command</string>
				<key>vitoclose</key>
				<false/>
			</dict>
			<dict>
				<key>destinationuid</key>
				<string>190193E2-4DA9-4A9F-ABA0-C411F4EC42F9</string>
				<key>modifiers</key>
				<integer>0</integer>
				<key>modifiersubtext</key>
				<string></string>
				<key>vitoclose</key>
				<false/>
			</dict>
		</array>
	</dict>
	<key>createdby</key>
	<string>Cl√©ment Poissonnier</string>
	<key>description</key>
	<string></string>
	<key>disabled</key>
	<false/>
	<key>name</key>
	<string>Twilio Console to Twilio CLI</string>
	<key>objects</key>
	<array>
		<dict>
			<key>config</key>
			<dict>
				<key>concurrently</key>
				<false/>
				<key>escaping</key>
				<integer>68</integer>
				<key>script</key>
				<string>import re
import sys
from abc import ABCMeta, abstractmethod

class Ressource:
    @abstractmethod
    def map_to_twilio_cli_command(self, url):
        pass

    @abstractmethod
    def get_twilio_cli_id(self):
        pass

    @abstractmethod
    def get_regex(self):
        pass

    def apply(self, url):
        return re.match(self.get_regex(), url)


class ChatUser(Ressource):
    def get_twilio_cli_id(self):
        return 'api:chat:v2:services:users:fetch'
    def get_regex(self):
        return r'https:\/\/www.twilio.com\/console\/chat\/services\/(\w+)\/users\/(\w+)$'
    def map_to_twilio_cli_command(self, url):
        match = re.search(self.get_regex(), url)
        return 'twilio {0} --service-sid {1} --sid {2} -o json'.format(self.get_twilio_cli_id(), match.group(1), match.group(2))


class ChatUserChannels(Ressource):
    def get_twilio_cli_id(self):
        return 'api:chat:v2:services:users:channels:list'
    def get_regex(self):
        return r'https:\/\/www.twilio.com\/console\/chat\/services\/(\w+)\/users\/(\w+)\/channels$'
    def map_to_twilio_cli_command(self, url):
        match = re.search(self.get_regex(), url)
        return 'twilio {0} --service-sid {1} --user-sid {2} -o json'.format(self.get_twilio_cli_id(), match.group(1), match.group(2))


class ChatChannel(Ressource):
    def get_twilio_cli_id(self):
        return 'api:chat:v2:services:channels:fetch'
    def get_regex(self):
        return r'https:\/\/www.twilio.com\/console\/chat\/services\/(\w+)\/channels\/(\w+)$'
    def map_to_twilio_cli_command(self, url):
        match = re.search(self.get_regex(), url)
        return 'twilio {0} --service-sid {1} --sid {2} -o json'.format(self.get_twilio_cli_id(), match.group(1), match.group(2))

class ChatChannelMembers(Ressource):
    def get_twilio_cli_id(self):
        return 'api:chat:v2:services:channels:members:list'
    def get_regex(self):
        return r'https:\/\/www.twilio.com\/console\/chat\/services\/(\w+)\/channels\/(\w+)\/members$'
    def map_to_twilio_cli_command(self, url):
        match = re.search(self.get_regex(), url)
        return 'twilio {0} --service-sid {1} --channel-sid {2} -o json'.format(self.get_twilio_cli_id(), match.group(1), match.group(2))

class ChatChannelMessages(Ressource):
    def get_twilio_cli_id(self):
        return 'api:chat:v2:services:channels:messages:list'
    def get_regex(self):
        return r'https:\/\/www.twilio.com\/console\/chat\/services\/(\w+)\/channels\/(\w+)\/messages$'
    def map_to_twilio_cli_command(self, url):
        match = re.search(self.get_regex(), url)
        return 'twilio {0} --service-sid {1} --channel-sid {2} -o json'.format(self.get_twilio_cli_id(), match.group(1), match.group(2))


class SmsMessage(Ressource):
    def get_twilio_cli_id(self):
        return 'api:core:messages:fetch'
    def get_regex(self):
        return r'https:\/\/www.twilio.com\/console\/sms\/logs\/(\w+)$'
    def map_to_twilio_cli_command(self, url):
        match = re.search(self.get_regex(), url)
        return 'twilio {0} --sid {1} -o json'.format(self.get_twilio_cli_id(), match.group(1))


query = sys.argv[1]

implementations = [ChatUser(), ChatUserChannels(), ChatChannel(), ChatChannelMembers(), ChatChannelMessages(), SmsMessage()]

implementations = filter(lambda implem: implem.apply(query), implementations)
command = (implementations[0] if implementations else None).map_to_twilio_cli_command(query)
sys.stdout.write(command)
sys.stdout.flush()</string>
				<key>scriptargtype</key>
				<integer>1</integer>
				<key>scriptfile</key>
				<string></string>
				<key>type</key>
				<integer>3</integer>
			</dict>
			<key>type</key>
			<string>alfred.workflow.action.script</string>
			<key>uid</key>
			<string>3FE49FA5-44FC-4438-B9C1-DE1B9B369C60</string>
			<key>version</key>
			<integer>2</integer>
		</dict>
		<dict>
			<key>config</key>
			<dict>
				<key>escaping</key>
				<integer>0</integer>
				<key>script</key>
				<string>{query}</string>
			</dict>
			<key>type</key>
			<string>alfred.workflow.action.terminalcommand</string>
			<key>uid</key>
			<string>3C51C0A6-81D7-456F-BA1F-62752EA1CA36</string>
			<key>version</key>
			<integer>1</integer>
		</dict>
		<dict>
			<key>config</key>
			<dict>
				<key>argumenttype</key>
				<integer>0</integer>
				<key>keyword</key>
				<string>twilio</string>
				<key>subtext</key>
				<string>put command result in clipboard</string>
				<key>text</key>
				<string>Get ressource as JSON from API</string>
				<key>withspace</key>
				<true/>
			</dict>
			<key>type</key>
			<string>alfred.workflow.input.keyword</string>
			<key>uid</key>
			<string>5B47B8AC-1201-469A-9136-9ED9D7F06B0C</string>
			<key>version</key>
			<integer>1</integer>
		</dict>
		<dict>
			<key>config</key>
			<dict>
				<key>concurrently</key>
				<false/>
				<key>escaping</key>
				<integer>68</integer>
				<key>script</key>
				<string>import re
import sys
from abc import ABCMeta, abstractmethod

class Ressource:
    @abstractmethod
    def map_to_twilio_cli_command(self, url):
        pass

    @abstractmethod
    def get_twilio_cli_id(self):
        pass

    @abstractmethod
    def get_regex(self):
        pass

    def apply(self, url):
        return re.match(self.get_regex(), url)


class ChatUser(Ressource):
    def get_twilio_cli_id(self):
        return 'api:chat:v2:services:users:fetch'
    def get_regex(self):
        return r'https:\/\/www.twilio.com\/console\/chat\/services\/(\w+)\/users\/(\w+)$'
    def map_to_twilio_cli_command(self, url):
        match = re.search(self.get_regex(), url)
        return 'twilio {0} --service-sid {1} --sid {2} -o json'.format(self.get_twilio_cli_id(), match.group(1), match.group(2))


class ChatUserChannels(Ressource):
    def get_twilio_cli_id(self):
        return 'api:chat:v2:services:users:channels:list'
    def get_regex(self):
        return r'https:\/\/www.twilio.com\/console\/chat\/services\/(\w+)\/users\/(\w+)\/channels$'
    def map_to_twilio_cli_command(self, url):
        match = re.search(self.get_regex(), url)
        return 'twilio {0} --service-sid {1} --user-sid {2} -o json'.format(self.get_twilio_cli_id(), match.group(1), match.group(2))


class ChatChannel(Ressource):
    def get_twilio_cli_id(self):
        return 'api:chat:v2:services:channels:fetch'
    def get_regex(self):
        return r'https:\/\/www.twilio.com\/console\/chat\/services\/(\w+)\/channels\/(\w+)$'
    def map_to_twilio_cli_command(self, url):
        match = re.search(self.get_regex(), url)
        return 'twilio {0} --service-sid {1} --sid {2} -o json'.format(self.get_twilio_cli_id(), match.group(1), match.group(2))

class ChatChannelMembers(Ressource):
    def get_twilio_cli_id(self):
        return 'api:chat:v2:services:channels:members:list'
    def get_regex(self):
        return r'https:\/\/www.twilio.com\/console\/chat\/services\/(\w+)\/channels\/(\w+)\/members$'
    def map_to_twilio_cli_command(self, url):
        match = re.search(self.get_regex(), url)
        return 'twilio {0} --service-sid {1} --channel-sid {2} -o json'.format(self.get_twilio_cli_id(), match.group(1), match.group(2))

class ChatChannelMessages(Ressource):
    def get_twilio_cli_id(self):
        return 'api:chat:v2:services:channels:messages:list'
    def get_regex(self):
        return r'https:\/\/www.twilio.com\/console\/chat\/services\/(\w+)\/channels\/(\w+)\/messages$'
    def map_to_twilio_cli_command(self, url):
        match = re.search(self.get_regex(), url)
        return 'twilio {0} --service-sid {1} --channel-sid {2} -o json'.format(self.get_twilio_cli_id(), match.group(1), match.group(2))


class SmsMessage(Ressource):
    def get_twilio_cli_id(self):
        return 'api:core:messages:fetch'
    def get_regex(self):
        return r'https:\/\/www.twilio.com\/console\/sms\/logs\/(\w+)$'
    def map_to_twilio_cli_command(self, url):
        match = re.search(self.get_regex(), url)
        return 'twilio {0} --sid {1} -o json'.format(self.get_twilio_cli_id(), match.group(1))


query = sys.argv[1]

implementations = [ChatUser(), ChatUserChannels(), ChatChannel(), ChatChannelMembers(), ChatChannelMessages(), SmsMessage()]

implementations = filter(lambda implem: implem.apply(query), implementations)
command = (implementations[0] if implementations else None).map_to_twilio_cli_command(query)
sys.stdout.write(command)
sys.stdout.flush()</string>
				<key>scriptargtype</key>
				<integer>1</integer>
				<key>scriptfile</key>
				<string></string>
				<key>type</key>
				<integer>3</integer>
			</dict>
			<key>type</key>
			<string>alfred.workflow.action.script</string>
			<key>uid</key>
			<string>190193E2-4DA9-4A9F-ABA0-C411F4EC42F9</string>
			<key>version</key>
			<integer>2</integer>
		</dict>
		<dict>
			<key>config</key>
			<dict>
				<key>escaping</key>
				<integer>0</integer>
				<key>script</key>
				<string>{query} | pbcopy &amp;&amp; exit</string>
			</dict>
			<key>type</key>
			<string>alfred.workflow.action.terminalcommand</string>
			<key>uid</key>
			<string>1C14CA2A-FA3F-41C7-91DD-9C3DEBED04EF</string>
			<key>version</key>
			<integer>1</integer>
		</dict>
		<dict>
			<key>config</key>
			<dict>
				<key>lastpathcomponent</key>
				<false/>
				<key>onlyshowifquerypopulated</key>
				<false/>
				<key>removeextension</key>
				<false/>
				<key>text</key>
				<string>Command result in clipboard</string>
				<key>title</key>
				<string>Twilio Console to Twilio CLI</string>
			</dict>
			<key>type</key>
			<string>alfred.workflow.output.notification</string>
			<key>uid</key>
			<string>AD8406AB-8370-4FDF-A087-391C586234B6</string>
			<key>version</key>
			<integer>1</integer>
		</dict>
	</array>
	<key>readme</key>
	<string></string>
	<key>uidata</key>
	<dict>
		<key>190193E2-4DA9-4A9F-ABA0-C411F4EC42F9</key>
		<dict>
			<key>xpos</key>
			<integer>275</integer>
			<key>ypos</key>
			<integer>180</integer>
		</dict>
		<key>1C14CA2A-FA3F-41C7-91DD-9C3DEBED04EF</key>
		<dict>
			<key>xpos</key>
			<integer>480</integer>
			<key>ypos</key>
			<integer>180</integer>
		</dict>
		<key>3C51C0A6-81D7-456F-BA1F-62752EA1CA36</key>
		<dict>
			<key>xpos</key>
			<integer>480</integer>
			<key>ypos</key>
			<integer>55</integer>
		</dict>
		<key>3FE49FA5-44FC-4438-B9C1-DE1B9B369C60</key>
		<dict>
			<key>xpos</key>
			<integer>275</integer>
			<key>ypos</key>
			<integer>55</integer>
		</dict>
		<key>5B47B8AC-1201-469A-9136-9ED9D7F06B0C</key>
		<dict>
			<key>xpos</key>
			<integer>60</integer>
			<key>ypos</key>
			<integer>125</integer>
		</dict>
		<key>AD8406AB-8370-4FDF-A087-391C586234B6</key>
		<dict>
			<key>xpos</key>
			<integer>700</integer>
			<key>ypos</key>
			<integer>180</integer>
		</dict>
	</dict>
	<key>variablesdontexport</key>
	<array/>
	<key>version</key>
	<string>1.0.1</string>
	<key>webaddress</key>
	<string>https://github.com/cpoissonnier</string>
</dict>
</plist>
