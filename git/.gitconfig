[user]
	email = daniel@welcomebob.com
	name = Graunephar
	signingKey = ""
[push]
	default = simple
[credential]
	helper = cache --timeout=95000
[alias]
	last = log -1 HEAD

[color]
	ui = true
[push]
	default = simple
[filter "lfs"]
	clean = git-lfs clean %f
	smudge = git-lfs smudge %f
	required = true
[core]
	autocrlf = input
	editor = nano
	excludesfile = /Users/danielgraungaard/.gitignore_global
	#editor = subl -n -w
[alias]
	cl = clone
	lg = log --all --graph --pretty=oneline --abbrev-commit --decorate
	co = checkout
	cob = co -b
	cub = "!f() { git checkout -b $1 && git push --set-upstream origin $1; }; f"
	cup = "!f() { git checkout -b $1 && git push --set-upstream origin $1; }; f"
	say = "!f() { msg=${1-Hello World}; echo $msg;  }; f"
	dangrevert = !bash -c 'source $HOME/.dotfiles/git/git_alias_functions.sh && gitrevertdangerous'#Moves head to last commit and force pushes! Asks beforehand
	acm = !git add . && git commit -m	
	st = status
	pushup = "!git push --set-upstream origin $(git symbolic-ref --short HEAD)"
	com = commit -m
	b = branch
	rb = rebase
	p = push
	home = checkout master
	h = checkout master
	s = status -s
	d = diff
	ds = diff --stat
	dc = diff --cached
	a = add
	ap = add -p
	c = commit --verbose
	ca = commit -a --verbose
	cm = commit --verbose -m
	cam = commit -a -m
	m = commit --amend --verbose
	rao = remote add origin
	ac = !git add . && git commit -am
	pushitgood = push -u origin --all
	#fætsh = fetch

	rename = commit --amend
	rn = rename

	#Print all branches, including upstream info, in a pretty way	
	pretty-branches = branch -vv
	pb = pretty-branches
	
	#Fix IGnore!, after .gitignore has been updated, remove files not in .gitignore from the repo
	fig = "!f() { source $HOME/.dotfiles/git/git_alias_functions.sh && check_input $1 && echo 'Updating repo based on .gitignore' && git rm -r --cached . && git add . && git commit -m $1 && echo "done"; }; f"

	# Working with branches
	#

	# Get the current branch name (not so useful in itself, but used in
	# other aliases)

	branch-name = "!git rev-parse --abbrev-ref HEAD"
	
	# Push the current branch to the remote "origin", and set it to track
	# the upstream branch
	publish = "!git push -u origin $(git branch-name)"
	
	# Delete the remote version of the current branch
	unpublish = "!git push origin :$(git branch-name)"

	#Deletes the branch by name and removes the local counterpart 	
	#SHould be expanded with a check to see if variable is sent	
	unpublish-all = "!f() { git checkout $1 && git unpublish && git home && git branch -D $1; }; f"
	

	# Delete a branch and recreate it from master — useful if you have, say,
	# a development branch and a master branch and they could conceivably go
	# out of sync
	recreate = "!f() { [[ -n $@ ]] && git checkout \"$@\" && git unpublish && git checkout master && git branch -D \"$@\" && git checkout -b \"$@\" && git publish; }; f"

	# Fire up your difftool (e.g. Kaleidescope) with all the changes that
	# are on the current branch.
	code-review = difftool origin/master...

	# Given a merge commit, find the span of commits that exist(ed) on that
	# branch. Again, not so useful in itself, but used by other aliases.
	merge-span = "!f() { echo $(git log -1 $2 --merges --pretty=format:%P | cut -d' ' -f1)$1$(git log -1 $2 --merges --pretty=format:%P | cut -d' ' -f2); }; f"

	# Find the commits that were introduced by a merge
	merge-log = "!git log `git merge-span .. $1`"
	# Show the changes that were introduced by a merge
	merge-diff = "!git diff `git merge-span ... $1`"
	# As above, but in your difftool
	merge-difftool = "!git difftool `git merge-span ... $1`"

	# Interactively rebase all the commits on the current branch
	rebase-branch = "!git rebase -i `git merge-base master HEAD`"

	#
	# Working with files
	#

	# Unstage any files that have been added to the staging area
	unstage = reset HEAD
	# Show changes that have been staged
	diffc = diff --cached

	# Mark a file as "assume unchanged", which means that Git will treat it
	# as though there are no changes to it even if there are. Useful for
	# temporary changes to tracked files
	assume = update-index --assume-unchanged
	# Reverse the above
	unassume = update-index --no-assume-unchanged
	# Show the files that are currently assume-unchanged
	assumed = "!git ls-files -v | grep ^h | cut -c 3-"

	# Checkout our version of a file and add it
	ours = "!f() { git checkout --ours $@ && git add $@; }; f"
	# Checkout their version of a file and add it
	theirs = "!f() { git checkout --theirs $@ && git add $@; }; f"

	# Delete any branches that have been merged into master
	# See also: https://gist.github.com/robmiller/5133264
	delete-merged-branches = "!git co master && git branch --merged | grep -v '\\*' | xargs -n 1 git branch -d"


	# list aliases
	la = "!git config -l | grep alias | cut -c 7-"
	
	#Allow Empty commit (for forcing post-receive script to run on remote)
	ecm = commit --allow-empty -m 





[gpg]
	program = gpg
[commit]
	gpgSign = false
	template = /Users/danielgraungaard/.stCommitMsg
[tag]
	forceSignAnnotated = false
[difftool "sourcetree"]
	cmd = opendiff \"$LOCAL\" \"$REMOTE\"
	path = 
[mergetool "sourcetree"]
	cmd = /Applications/Sourcetree.app/Contents/Resources/opendiff-w.sh \"$LOCAL\" \"$REMOTE\" -ancestor \"$BASE\" -merge \"$MERGED\"
	trustExitCode = true
